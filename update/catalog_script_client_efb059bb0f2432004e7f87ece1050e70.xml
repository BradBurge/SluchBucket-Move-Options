<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_to>item</applies_to>
        <cat_item/>
        <cat_variable/>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <messages/>
        <name>onChange - SlushBucket Update</name>
        <order/>
        <script><![CDATA[var optionsHistory = {left: '', right: ''};
function onChange (control, oldValue, newValue, isLoading) {
    var questionName = control.id;

    for (var i = 0, len = g_form.nameMap.length; i < len; ++i) {
        if (g_form.nameMap[i].realName !== questionName) continue;
        questionName = g_form.nameMap[i].prettyName;
    }

    var leftBucket = gel(questionName + '_select_0');
    var rightBucket = gel(questionName + '_select_1');
	
    // querySelector is IE8 compatible. IE7 is not supported in Service Portal.
    var changedOptions = {
        left: leftBucket.querySelectorAll('option'),
        right: rightBucket.querySelectorAll('option')
    };

    if (isLoading) {
        optionsHistory.left = leftBucket.querySelectorAll('option');
        optionsHistory.right = rightBucket.querySelectorAll('option');
        return;
    }

    if (newValue == '' && !window[g_user.userID + control.id]) {
        window[g_user.userID + control.id] = {
            map: {}
        };

        // After the form is loaded and populated with values from the server
		// Created the system property 'glide.xmlhttp.excessive' and set it to 200
		// This allows the left bucket to hold more than the 100 default options
        var userClassArray = [];
        for (var i = 0, len = leftBucket.options.length; i < len; ++i) {
            userClassArray.push(leftBucket.options.item(i).value);
        }

        var gajax = new GlideAjax('BoralGetUserClassSC');
        gajax.addParam('sysparm_name', 'buildMapFromClassArray');
        gajax.addParam('sysparm_user_class_array', userClassArray.join(','));
        gajax.getXML(function (_response) {
            var userClassMap = JSON.parse(_response.responseXML.documentElement.getAttribute('answer'));
            // evalJSON??
            window[g_user.userID + control.id].map = userClassMap;

            for (var userClassGuid in userClassMap) {
                var userClassObject = userClassMap[userClassGuid];

                if (userClassObject.parent) {
                    if (userClassMap[userClassObject.parent].children) {
                        userClassMap[userClassObject.parent].children[userClassGuid] = userClassObject;
                    } else {
                        userClassMap[userClassObject.parent].children = {
                         
                        }
						userClassMap[userClassObject.parent].children[userClassGuid] = userClassObject;
                    }
                }
            }
        });
    }

    /**
    *******************************************************************************************
    * Get the value of the option which is being moved not all the options of the rightBucket *
    *******************************************************************************************
    **/
    
    var userClassMap = window[g_user.userID + control.id] && window[g_user.userID + control.id].map;
    var movedOptions = getMovedOptions();
    for (var movedOptionGuid in movedOptions.added.left) {
        var movedOptionChildren = getAllChildren(movedOptionGuid);

        for (var i = 0, len = movedOptionChildren.length; i < len; ++i) {
            leftBucket.add(movedOptionChildren[i]);
        }
    }

    for (var movedOptionGuid in movedOptions.added.right) {
        var movedOptionChildren = getAllChildren(movedOptionGuid);

        for (var i = 0, len = movedOptionChildren.length; i < len; ++i) {
            rightBucket.add(movedOptionChildren[i]);
        }
    }

    function getAllChildren (_userClassGuid) {
        var documentOptions = document.getElementsByTagName('option');
        var childOptions = [];

        if (userClassMap[_userClassGuid] && userClassMap[_userClassGuid].children) {
            for (var child in userClassMap[_userClassGuid].children) {
                for (var i = 0, len = documentOptions.length; i < len; ++i) {
                    if (documentOptions[i].value === child) {
						childOptions = getAllChildren(child).concat(childOptions);
                        childOptions.push(documentOptions[i]);
                    }
                }
            }
        }

        return childOptions;
    }

    function getMovedOptions () {
        // Get the difference between the previous state and the current state to know which options were moved.
        var historyMap = {
            left: {},
            right: {}
        };
        var changedMap = {
            left: {},
            right: {}
        };
        var addedMap = {
            left: {},
            right: {}
        };
        var removedMap = {
            left: {},
            right: {}
        };

        for (var i = 0, len = optionsHistory.left.length; i < len; ++i) {
            if (optionsHistory.left[i].value === '') continue;
            historyMap.left[optionsHistory.left[i].value] = true;
        }

        for (var i = 0, len = changedOptions.left.length; i < len; ++i) {
            if (changedOptions.left[i].value === '') continue;
            changedMap.left[changedOptions.left[i].value] = true;
        }

        for (var i = 0, len = optionsHistory.left.length; i < len; ++i) {
            if (optionsHistory.left[i].value === '') continue;
            if (optionsHistory.left[i].value in changedMap.left) {
                // Option was not changed
                delete changedMap.left[optionsHistory.left[i].value];
            } else {
                // Option was removed from this side
                console.log(optionsHistory.left[i].value + ' removed from left bucket.');
                removedMap.left[optionsHistory.left[i].value] = true;
            }
        }

        for (var i = 0, len = changedOptions.left.length; i < len; ++i) {
            if (changedOptions.left[i].value === '') continue;
            if (changedOptions.left[i].value in historyMap.left) {
                // Option was not changed
                delete historyMap.left[changedOptions.left[i].value];
            } else {
                // Option was added to this side
                console.log(changedOptions.left[i].value + ' added to left bucket.');
                addedMap.left[changedOptions.left[i].value] = true;
            }
        }

        for (var i = 0, len = optionsHistory.right.length; i < len; ++i) {
            if (optionsHistory.right[i].value === '') continue;
            historyMap.right[optionsHistory.right[i].value] = true;
        }

        for (var i = 0, len = changedOptions.right.length; i < len; ++i) {
            if (changedOptions.right[i].value === '') continue;
            changedMap.right[changedOptions.right[i].value] = true;
        }

        for (var i = 0, len = optionsHistory.right.length; i < len; ++i) {
            if (optionsHistory.right[i].value === '') continue;
            if (optionsHistory.right[i].value in changedMap.right) {
                // Option was not changed
                delete changedMap.right[optionsHistory.right[i].value];
            } else {
                // Option was removed from this side
                console.log(optionsHistory.right[i].value + ' removed from right bucket.');
                removedMap.right[optionsHistory.right[i].value] = true;
            }
        }

        for (var i = 0, len = changedOptions.right.length; i < len; ++i) {
            if (changedOptions.right[i].value === '') continue;
            if (changedOptions.right[i].value in historyMap.right) {
                // Option was not changed
                delete historyMap.right[changedOptions.right[i].value];
            } else {
                // Option was added to this side
                console.log(changedOptions.right[i].value + ' added to right bucket.');
                addedMap.right[changedOptions.right[i].value] = true;
            }
        }

        return {
            added: addedMap,
            removed: removedMap
        };
    }

    optionsHistory.left = leftBucket.querySelectorAll('option');
    optionsHistory.right = rightBucket.querySelectorAll('option');
}]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-02-02 00:06:27</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>efb059bb0f2432004e7f87ece1050e70</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>onChange - SlushBucket Update</sys_name>
        <sys_overrides/>
        <sys_package display_value="SlushBucket Move Options" source="x_57605_slushbucke">fb3f09370f2432004e7f87ece1050ec6</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="SlushBucket Move Options">fb3f09370f2432004e7f87ece1050ec6</sys_scope>
        <sys_update_name>catalog_script_client_efb059bb0f2432004e7f87ece1050e70</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-02-02 00:06:27</sys_updated_on>
        <table/>
        <type>onChange</type>
        <ui_type>10</ui_type>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
